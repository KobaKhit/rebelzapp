version: '3.8'

# Production Docker Compose with uv for fast Python dependency installation
# Uses unified container approach: Frontend + Backend + Nginx in one container

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
      # Enable BuildKit for faster builds and caching
      cache_from:
        - ghcr.io/astral-sh/uv:python3.11-slim
        - node:18-alpine
    ports:
      - "80:80"
    environment:
      - ENV=production
      - DATABASE_URL=${DATABASE_URL}
      - SECRET_KEY=${SECRET_KEY}
      - ALLOWED_ORIGINS=${ALLOWED_ORIGINS}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - MODEL_NAME=${MODEL_NAME:-gpt-4o-mini}
      - ACCESS_TOKEN_EXPIRE_MINUTES=${ACCESS_TOKEN_EXPIRE_MINUTES:-60}
      - APP_NAME=${APP_NAME:-Rebelz API}
      - MAX_FILE_SIZE=${MAX_FILE_SIZE:-5242880}
      - RATE_LIMIT_CALLS=${RATE_LIMIT_CALLS:-100}
      - RATE_LIMIT_PERIOD=${RATE_LIMIT_PERIOD:-60}
      - ENABLE_DOCS=${ENABLE_DOCS:-false}
      - REDIS_URL=${REDIS_URL:-redis://redis:6379/0}
      - VITE_API_BASE_URL=${VITE_API_BASE_URL}
    depends_on:
      - db
      - redis
    restart: unless-stopped
    networks:
      - app-network
    volumes:
      - app_uploads:/app/uploads

  db:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      - app-network

  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_password}
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - app-network

volumes:
  postgres_data:
  redis_data:
  app_uploads:

networks:
  app-network:
    driver: bridge
